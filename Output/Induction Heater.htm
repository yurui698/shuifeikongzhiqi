<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\Induction Heater.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\Induction Heater.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Dec 05 15:48:46 2018
<BR><P>
<H3>Maximum Stack Usage =        584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SysClock &rArr; SysHandleEvent &rArr; Period_Events_Handle &rArr; Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f10x_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f10x_it.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f10x_it.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToBuffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463Receive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Para_Trans
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport5
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport3
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_YANHUA_touch_screen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Trans
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[183]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_cmd_receive
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_receive
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_receive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_cmd_receive
</UL>

<P><STRONG><a name="[e6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport5
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Measu
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport5
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Measu
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[1aa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[57]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[55]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[180]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ac]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1b0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>ADC1_Configuration</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, stm32_configuration.o(i.ADC1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC1_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[6e]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[6d]"></a>ADC_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[72]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[70]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>ADC_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[19a]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startadc
</UL>

<P><STRONG><a name="[71]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CPS131_Read</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, si7021.o(i.CPS131_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPS131_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
</UL>

<P><STRONG><a name="[79]"></a>CPS131_Send</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, si7021.o(i.CPS131_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPS131_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
</UL>

<P><STRONG><a name="[7a]"></a>CPS131_Transtart</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, si7021.o(i.CPS131_Transtart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CPS131_Transtart
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
</UL>

<P><STRONG><a name="[7b]"></a>CPS131_Transtop</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, si7021.o(i.CPS131_Transtop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CPS131_Transtop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[80]"></a>DMA_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startadc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteDataToDMA_BufferTX3
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[69]"></a>DMA_DeInit</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[171]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>DMA_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>DMA_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[6a]"></a>DMA_Init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[83]"></a>DMA_Uart1_Init</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, stm32_configuration.o(i.DMA_Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_Uart1_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[85]"></a>DMA_Uart2_Init</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, stm32_configuration.o(i.DMA_Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_Uart2_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[86]"></a>DMA_Uart3_Init</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, stm32_configuration.o(i.DMA_Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DMA_Uart3_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[87]"></a>DMA_Uart4_Init</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, stm32_configuration.o(i.DMA_Uart4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_Uart4_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>Delayms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, si4463.o(i.Delayms))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RESET
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
</UL>

<P><STRONG><a name="[77]"></a>Delayus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systemclock.o(i.Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOxh_send_cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RESET
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
</UL>

<P><STRONG><a name="[88]"></a>EXIT0_Enable</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32_configuration.o(i.EXIT0_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXIT0_Enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>EXTI1_Enable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32_configuration.o(i.EXTI1_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI1_Enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI4_IRQHandler &rArr; SI4463_INT_STATUS &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_INT_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT0_Enable
</UL>

<P><STRONG><a name="[91]"></a>EXTI_Configuration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32_configuration.o(i.EXTI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[8c]"></a>EXTI_Init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT0_Enable
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[af]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_LockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_LockBank1))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[120]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Without_check
</UL>

<P><STRONG><a name="[11f]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b1]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_UnlockBank1))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[ad]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[129]"></a>First_Getaverage</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, handletask.o(i.First_Getaverage))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_csb_yw
</UL>

<P><STRONG><a name="[133]"></a>Flash_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dataflash.o(i.Flash_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_init_readflash
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgfrist_init_readflash
</UL>

<P><STRONG><a name="[b0]"></a>Flash_Write</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dataflash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Flash_Write &rArr; Flash_Write_Without_check &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockBank1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockBank1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Without_check
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
</UL>

<P><STRONG><a name="[b2]"></a>Flash_Write_Without_check</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dataflash.o(i.Flash_Write_Without_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Flash_Write_Without_check &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[b4]"></a>GET_PRESSUE0</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, max44009.o(i.GET_PRESSUE0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GET_PRESSUE0 &rArr; MAX44009_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[ba]"></a>GET_PRESSUE1</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, si7021.o(i.GET_PRESSUE1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GET_PRESSUE1 &rArr; SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[bf]"></a>GET_PRESSUE4</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, si7021.o(i.GET_PRESSUE4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GET_PRESSUE4 &rArr; CPS131_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c0]"></a>GET_level0</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, max44009.o(i.GET_level0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GET_level0 &rArr; MAX44009_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c1]"></a>GET_level1</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, si7021.o(i.GET_level1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GET_level1 &rArr; SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c2]"></a>GET_level4</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, si7021.o(i.GET_level4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GET_level4 &rArr; CPS131_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_Configuration</STRONG> (Thumb, 748 bytes, Stack size 40 bytes, stm32_configuration.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT0_Enable
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_Init</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[78]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Read
</UL>

<P><STRONG><a name="[fd]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[82]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RESET
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToBuffer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteDataToDMA_BufferTX3
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RESET
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[19f]"></a>Get_Adclvbo</STRONG> (Thumb, 128 bytes, Stack size 216 bytes, handletask.o(i.Get_Adclvbo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Get_Adclvbo
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c7]"></a>Get_Carbon</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, si7021.o(i.Get_Carbon))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Carbon &rArr; CPS131_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Transtart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPS131_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[c8]"></a>Get_Illuminance</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, max44009.o(i.Get_Illuminance))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Get_Illuminance &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>IWDG_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_configuration.o(i.IWDG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[1b2]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable), UNUSED)

<P><STRONG><a name="[d3]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Events_Handle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
</UL>

<P><STRONG><a name="[d1]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[d2]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[b9]"></a>MAX44009_Read</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, max44009.o(i.MAX44009_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MAX44009_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
</UL>

<P><STRONG><a name="[b6]"></a>MAX44009_Send</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, max44009.o(i.MAX44009_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MAX44009_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
</UL>

<P><STRONG><a name="[b5]"></a>MAX44009_Transtart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, max44009.o(i.MAX44009_Transtart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAX44009_Transtart
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
</UL>

<P><STRONG><a name="[b7]"></a>MAX44009_Transtop</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, max44009.o(i.MAX44009_Transtop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MAX44009_Transtop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
</UL>

<P><STRONG><a name="[d8]"></a>MD5Decode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, password_md5.o(i.MD5Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[d5]"></a>MD5Encode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, password_md5.o(i.MD5Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[d4]"></a>MD5Final</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, password_md5.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[f6]"></a>MD5Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, password_md5.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[d7]"></a>MD5Transform</STRONG> (Thumb, 1868 bytes, Stack size 280 bytes, password_md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[d6]"></a>MD5Update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, password_md5.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[dd]"></a>MQTTPacket_encode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[db]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[d9]"></a>MQTTSerialize_connect</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
</UL>

<P><STRONG><a name="[da]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[e2]"></a>MQTTSerialize_publish</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>

<P><STRONG><a name="[e3]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[e4]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe
</UL>

<P><STRONG><a name="[e5]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[e1]"></a>MQTTstrlen</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>NVIC_Configuration</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32_configuration.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[8a]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT0_Enable
</UL>

<P><STRONG><a name="[e8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e9]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>PRESSUE_level1</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, si7021.o(i.PRESSUE_level1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PRESSUE_level1 &rArr; SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[ef]"></a>PRESSUE_level2</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, max44009.o(i.PRESSUE_level2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PRESSUE_level2 &rArr; MAX44009_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>Period_Events_Handle</STRONG> (Thumb, 2028 bytes, Stack size 128 bytes, handletask.o(i.Period_Events_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Period_Events_Handle &rArr; Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_init_readflash
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_send_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startadc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_asc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SENDZZ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463Receive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Para_Trans
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport5
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport3
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_csb_yw
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_YANHUA_touch_screen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOxh_send_cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT0_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_START_RX
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SET_PROPERTY_1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialRealSendBuff
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Trans
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Measu
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHandleEvent
</UL>

<P><STRONG><a name="[125]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[67]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[15f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[166]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[68]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[165]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[f2]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[118]"></a>RCC_Configuration</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32_configuration.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[119]"></a>RCC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[178]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[cf]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[124]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11a]"></a>RCC_HSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[11e]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[122]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[121]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[123]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11b]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[104]"></a>SF_Flow_Measu</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, handletask.o(i.SF_Flow_Measu))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SF_Flow_Measu &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[105]"></a>SF_Flow_Trans</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, handletask.o(i.SF_Flow_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SF_Flow_Trans &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteDataToDMA_BufferTX3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[139]"></a>SI4463_CMD</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, si4463.o(i.SI4463_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_INT_STATUS
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_TX_FIFO_RESET
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SPI_Active
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RX_FIFO_RESET
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_GPIO_CONFIG
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CONFIG_INIT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_START_RX
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SET_PROPERTY_1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
</UL>

<P><STRONG><a name="[13c]"></a>SI4463_CONFIG_INIT</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, si4463.o(i.SI4463_CONFIG_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SI4463_CONFIG_INIT &rArr; SI4463_GPIO_CONFIG &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_GPIO_CONFIG
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
</UL>

<P><STRONG><a name="[13d]"></a>SI4463_GPIO_CONFIG</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, si4463.o(i.SI4463_GPIO_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4463_GPIO_CONFIG &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CONFIG_INIT
</UL>

<P><STRONG><a name="[8f]"></a>SI4463_INT_STATUS</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si4463.o(i.SI4463_INT_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI4463_INT_STATUS &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
</UL>

<P><STRONG><a name="[f5]"></a>SI4463_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, si4463.o(i.SI4463_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SI4463_Init &rArr; SI4463_CONFIG_INIT &rArr; SI4463_GPIO_CONFIG &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_INT_STATUS
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RESET
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CONFIG_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[111]"></a>SI4463_READ_PACKET</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, si4463.o(i.SI4463_READ_PACKET))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4463_READ_PACKET &rArr; SI4463_SPI_Active &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SPI_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[13e]"></a>SI4463_READ_RESPONSE</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, si4463.o(i.SI4463_READ_RESPONSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_INT_STATUS
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_GPIO_CONFIG
</UL>

<P><STRONG><a name="[13f]"></a>SI4463_RESET</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, si4463.o(i.SI4463_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SI4463_RESET
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
</UL>

<P><STRONG><a name="[141]"></a>SI4463_RX_FIFO_RESET</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4463.o(i.SI4463_RX_FIFO_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI4463_RX_FIFO_RESET &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_START_RX
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
</UL>

<P><STRONG><a name="[143]"></a>SI4463_SEND_PACKET</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, si4463.o(i.SI4463_SEND_PACKET))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI4463_SEND_PACKET &rArr; SI4463_TX_FIFO_RESET &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_TX_FIFO_RESET
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SPI_Active
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RX_FIFO_RESET
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SENDZZ
</UL>

<P><STRONG><a name="[10f]"></a>SI4463_SET_PROPERTY_1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si4463.o(i.SI4463_SET_PROPERTY_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SI4463_SET_PROPERTY_1 &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[140]"></a>SI4463_SPI_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4463.o(i.SI4463_SPI_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI4463_SPI_Active &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
</UL>

<P><STRONG><a name="[110]"></a>SI4463_START_RX</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, si4463.o(i.SI4463_START_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI4463_START_RX &rArr; SI4463_TX_FIFO_RESET &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_TX_FIFO_RESET
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_RX_FIFO_RESET
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[144]"></a>SI4463_TX_FIFO_RESET</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4463.o(i.SI4463_TX_FIFO_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI4463_TX_FIFO_RESET &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_START_RX
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
</UL>

<P><STRONG><a name="[13a]"></a>SI4463_WAIT_CTS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, si4463.o(i.SI4463_WAIT_CTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
</UL>

<P><STRONG><a name="[145]"></a>SI7021_HumiMeasurement</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, si7021.o(i.SI7021_HumiMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI7021_HumiMeasurement &rArr; SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[be]"></a>SI7021_ReadByte</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, si7021.o(i.SI7021_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TempMeasurement
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
</UL>

<P><STRONG><a name="[146]"></a>SI7021_TempMeasurement</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, si7021.o(i.SI7021_TempMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI7021_TempMeasurement &rArr; SI7021_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_WriteByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TransStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
</UL>

<P><STRONG><a name="[bb]"></a>SI7021_TransStart</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, si7021.o(i.SI7021_TransStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SI7021_TransStart
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TempMeasurement
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
</UL>

<P><STRONG><a name="[bd]"></a>SI7021_TransStop</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, si7021.o(i.SI7021_TransStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SI7021_TransStop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TempMeasurement
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
</UL>

<P><STRONG><a name="[bc]"></a>SI7021_WriteByte</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, si7021.o(i.SI7021_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI7021_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TempMeasurement
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
</UL>

<P><STRONG><a name="[147]"></a>SPI1_Configuration</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32_configuration.o(i.SPI1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI1_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[14b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
</UL>

<P><STRONG><a name="[14d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
</UL>

<P><STRONG><a name="[14c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
</UL>

<P><STRONG><a name="[149]"></a>SPI_Init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[14a]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_SSOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[13b]"></a>SPI_WriteByte</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, si4463.o(i.SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_WAIT_CTS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_RESPONSE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_CMD
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_READ_PACKET
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>SYS_Confgiuration</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32_configuration.o(i.SYS_Confgiuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYS_Confgiuration &rArr; ADC1_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgfrist_init_readflash
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart4_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart3_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>Scan_Events_Handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, handletask.o(i.Scan_Events_Handle))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHandleEvent
</UL>

<P><STRONG><a name="[158]"></a>Set_Event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systemclock.o(i.Set_Event))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUpdate
</UL>

<P><STRONG><a name="[90]"></a>Start_timerEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, systemclock.o(i.Start_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_cmd_receive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_cmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_reply
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_cmd_receive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SENDZZ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463Receive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Para_Trans
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport3
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_reply
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_reply
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_send
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_sdk_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Trans
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Measu
</UL>

<P><STRONG><a name="[8e]"></a>Stop_timerEx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, systemclock.o(i.Stop_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stop_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTimer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_cmd_receive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_cmd_receive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[15b]"></a>SysClock</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, systemclock.o(i.SysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SysClock &rArr; SysHandleEvent &rArr; Period_Events_Handle &rArr; Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUpdate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHandleEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>TD_Getaverage</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, handletask.o(i.TD_Getaverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD_Getaverage
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_csb_yw
</UL>

<P><STRONG><a name="[153]"></a>TIM2_Configuration</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stm32_configuration.o(i.TIM2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM2_Configuration &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>TIM5_Configuration</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32_configuration.o(i.TIM5_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIM5_Configuration &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, stm32f10x_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[fb]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[160]"></a>TIM_DeInit</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[164]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>TIM_ICInit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[fa]"></a>TIM_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[16a]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16c]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16e]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[168]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[161]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Configuration
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[151]"></a>TimerInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systemclock.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART4_IRQHandler &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>UART5_Configuration</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32_configuration.o(i.UART5_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART5_Configuration &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f10x_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART5_IRQHandler &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART1_IRQHandler &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART2_IRQHandler &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART3_IRQHandler &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>USART_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
</UL>

<P><STRONG><a name="[81]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
</UL>

<P><STRONG><a name="[7f]"></a>USART_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteDataToDMA_BufferTX3
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[7d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[170]"></a>USART_GetITStatus</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>USART_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToBuffer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
</UL>

<P><STRONG><a name="[172]"></a>USART_Init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Configuration
</UL>

<P><STRONG><a name="[176]"></a>USART_ReceiveData</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USART_SendData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>Uart1_Init</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32_configuration.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart1_Init &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[155]"></a>Uart2_Init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32_configuration.o(i.Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart2_Init &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[156]"></a>Uart3_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, stm32_configuration.o(i.Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uart3_Init &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[157]"></a>Uart4_Init</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stm32_configuration.o(i.Uart4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uart4_Init &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17b]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[196]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[16f]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUpdate
</UL>

<P><STRONG><a name="[c9]"></a>get_light</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, max44009.o(i.get_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_light &rArr; MAX44009_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Transtart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX44009_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[f4]"></a>initialRealSendBuff</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, handletask.o(i.initialRealSendBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initialRealSendBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; SysClock &rArr; SysHandleEvent &rArr; Period_Events_Handle &rArr; Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[75]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
</UL>

<P><STRONG><a name="[18c]"></a>mqtt_connect</STRONG> (Thumb, 288 bytes, Stack size 288 bytes, handletask.o(i.mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
</UL>

<P><STRONG><a name="[9b]"></a>mqtt_publish</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, handletask.o(i.mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_reply
</UL>

<P><STRONG><a name="[18a]"></a>mqtt_publish1</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, handletask.o(i.mqtt_publish1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mqtt_publish1 &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
</UL>

<P><STRONG><a name="[18d]"></a>mqtt_subscribe</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, handletask.o(i.mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mqtt_subscribe &rArr; MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
</UL>

<P><STRONG><a name="[ca]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
</UL>

<P><STRONG><a name="[197]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[14f]"></a>wgfrist_init_readflash</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32_configuration.o(i.wgfrist_init_readflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wgfrist_init_readflash
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Confgiuration
</UL>

<P><STRONG><a name="[de]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[dc]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[df]"></a>writeInt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[e0]"></a>writeMQTTString</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[169]"></a>TI1_Config</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16b]"></a>TI2_Config</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16d]"></a>TI3_Config</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[167]"></a>TI4_Config</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15e]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[73]"></a>AddTimer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, systemclock.o(i.AddTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTimer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>

<P><STRONG><a name="[15a]"></a>DeleteTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systemclock.o(i.DeleteTimer))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
</UL>

<P><STRONG><a name="[74]"></a>FindTimer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemclock.o(i.FindTimer))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
</UL>

<P><STRONG><a name="[15d]"></a>SysHandleEvent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systemclock.o(i.SysHandleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SysHandleEvent &rArr; Period_Events_Handle &rArr; Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Events_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock
</UL>

<P><STRONG><a name="[15c]"></a>TimerUpdate</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, systemclock.o(i.TimerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerUpdate &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Event
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock
</UL>

<P><STRONG><a name="[10e]"></a>Clear_Buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, handletask.o(i.Clear_Buf))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[128]"></a>Ethernet_mqtt_receive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_mqtt_receive))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1
</UL>

<P><STRONG><a name="[19e]"></a>Ethernet_mqtt_reply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_mqtt_reply))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[92]"></a>Ethernet_mqtt_sdk_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_mqtt_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ethernet_mqtt_sdk_init &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[93]"></a>Ethernet_mqtt_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_mqtt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ethernet_mqtt_send &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[94]"></a>Ethernet_other_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_other_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ethernet_other_init &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[127]"></a>Ethernet_other_receive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_other_receive))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1
</UL>

<P><STRONG><a name="[19d]"></a>Ethernet_other_reply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_other_reply))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[95]"></a>Ethernet_other_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_other_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ethernet_other_send &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[96]"></a>Ethernet_sdk_receive</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, handletask.o(i.Ethernet_sdk_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Ethernet_sdk_receive &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_str
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dword_asc_hex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1
</UL>

<P><STRONG><a name="[9a]"></a>Ethernet_sdk_reply</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, handletask.o(i.Ethernet_sdk_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Ethernet_sdk_reply &rArr; mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[9e]"></a>Ethernet_sdk_send</STRONG> (Thumb, 1202 bytes, Stack size 48 bytes, handletask.o(i.Ethernet_sdk_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Ethernet_sdk_send &rArr; made_keyX_valueF &rArr; float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_value4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[a3]"></a>Ethernet_tcp_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, handletask.o(i.Ethernet_tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ethernet_tcp_init &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[a4]"></a>Ethernet_tcp_receive</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, handletask.o(i.Ethernet_tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Ethernet_tcp_receive &rArr; handlecmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1
</UL>

<P><STRONG><a name="[a6]"></a>Ethernet_tcp_reply</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, handletask.o(i.Ethernet_tcp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ethernet_tcp_reply &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[a7]"></a>Ethernet_tcp_send</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, handletask.o(i.Ethernet_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Ethernet_tcp_send &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_coltsnd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_hand_auto
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[a8]"></a>GetCRC16</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, handletask.o(i.GetCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_fertisnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_coltsnd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_hand_auto
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleRegister
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463Receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport5
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport3
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_YANHUA_touch_screen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
</UL>

<P><STRONG><a name="[cb]"></a>IOxh_send_cmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, handletask.o(i.IOxh_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IOxh_send_cmd &rArr; WriteDataToDMA_BufferTX1
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[ea]"></a>Net_connect_init</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, handletask.o(i.Net_connect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Net_connect_init &rArr; gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[126]"></a>ReadData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, handletask.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadData &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_send_cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SENDZZ
</UL>

<P><STRONG><a name="[109]"></a>RxReport1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, handletask.o(i.RxReport1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RxReport1 &rArr; Ethernet_tcp_receive &rArr; handlecmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_receive
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[10b]"></a>RxReport1_YANHUA_touch_screen</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, handletask.o(i.RxReport1_YANHUA_touch_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RxReport1_YANHUA_touch_screen &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[10a]"></a>RxReport1_csb_yw</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, handletask.o(i.RxReport1_csb_yw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RxReport1_csb_yw &rArr; TD_Getaverage
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD_Getaverage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Getaverage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[108]"></a>RxReport2</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, handletask.o(i.RxReport2))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RxReport2 &rArr; cdma_SMS_receive &rArr; Flash_Write &rArr; Flash_Write_Without_check &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_receive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_cmd_receive
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_receive
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_receive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_cmd_receive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[101]"></a>RxReport3</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, handletask.o(i.RxReport3))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RxReport3 &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[ff]"></a>RxReport4</STRONG> (Thumb, 4888 bytes, Stack size 56 bytes, handletask.o(i.RxReport4))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RxReport4 &rArr; Flash_Write &rArr; Flash_Write_Without_check &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[117]"></a>RxReport5</STRONG> (Thumb, 796 bytes, Stack size 24 bytes, handletask.o(i.RxReport5))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RxReport5 &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[100]"></a>SF_Para_Trans</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, handletask.o(i.SF_Para_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SF_Para_Trans &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[137]"></a>SF_WriteDataToDMA_BufferTX3</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, handletask.o(i.SF_WriteDataToDMA_BufferTX3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_WriteDataToDMA_BufferTX3
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Trans
</UL>

<P><STRONG><a name="[112]"></a>SI4463Receive</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, handletask.o(i.SI4463Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SI4463Receive &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[113]"></a>SI4463_SENDZZ</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, handletask.o(i.SI4463_SENDZZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SI4463_SENDZZ &rArr; SI4463_SEND_PACKET &rArr; SI4463_TX_FIFO_RESET &rArr; SI4463_CMD &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleRegister
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[103]"></a>Send_slave_cmd</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, handletask.o(i.Send_slave_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Send_slave_cmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSingleRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[179]"></a>WriteDataToBuffer</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, handletask.o(i.WriteDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteDataToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_send_cmd
</UL>

<P><STRONG><a name="[cc]"></a>WriteDataToDMA_BufferTX1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, handletask.o(i.WriteDataToDMA_BufferTX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDataToDMA_BufferTX1
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Ethernet_module
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport1_YANHUA_touch_screen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOxh_send_cmd
</UL>

<P><STRONG><a name="[17a]"></a>WriteDataToDMA_BufferTX2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, handletask.o(i.WriteDataToDMA_BufferTX2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDataToDMA_BufferTX2
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
</UL>

<P><STRONG><a name="[138]"></a>WriteDataToDMA_BufferTX3</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, handletask.o(i.WriteDataToDMA_BufferTX3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDataToDMA_BufferTX3
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Para_Trans
</UL>

<P><STRONG><a name="[132]"></a>WriteDataToDMA_BufferTX4</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, handletask.o(i.WriteDataToDMA_BufferTX4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDataToDMA_BufferTX4
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport4
</UL>

<P><STRONG><a name="[136]"></a>WriteMultipleRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, handletask.o(i.WriteMultipleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WriteMultipleRegister &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_paramWX
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slave_param
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Para_Trans
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Flow_Trans
</UL>

<P><STRONG><a name="[142]"></a>WriteSingleRegister</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, handletask.o(i.WriteSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WriteSingleRegister &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_slave_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SENDZZ
</UL>

<P><STRONG><a name="[ab]"></a>alter_hand_auto</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, handletask.o(i.alter_hand_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = alter_hand_auto &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
</UL>

<P><STRONG><a name="[a9]"></a>alter_send</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, handletask.o(i.alter_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = alter_send &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
</UL>

<P><STRONG><a name="[f8]"></a>byte_to_asc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, handletask.o(i.byte_to_asc))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[9c]"></a>bytelen_to_asc</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, handletask.o(i.bytelen_to_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bytelen_to_asc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgcollector_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_reply
</UL>

<P><STRONG><a name="[12e]"></a>cdma_SMS_receive</STRONG> (Thumb, 1614 bytes, Stack size 72 bytes, handletask.o(i.cdma_SMS_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cdma_SMS_receive &rArr; Flash_Write &rArr; Flash_Write_Without_check &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_str
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_number
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[12c]"></a>cdma_cmd_receive</STRONG> (Thumb, 710 bytes, Stack size 24 bytes, handletask.o(i.cdma_cmd_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cdma_cmd_receive &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[12f]"></a>cdma_mqtt_receive</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, handletask.o(i.cdma_mqtt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cdma_mqtt_receive &rArr; handlecmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[184]"></a>cdma_mqtt_reply</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, handletask.o(i.cdma_mqtt_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cdma_mqtt_reply &rArr; mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[188]"></a>cdma_mqtt_send</STRONG> (Thumb, 1260 bytes, Stack size 40 bytes, handletask.o(i.cdma_mqtt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cdma_mqtt_send &rArr; mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_coltsnd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_hand_auto
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[19b]"></a>cdma_other_reply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.cdma_other_reply))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[130]"></a>cdma_sdk_receive</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, handletask.o(i.cdma_sdk_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cdma_sdk_receive &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_str
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dword_asc_hex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[189]"></a>cdma_sdk_reply</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, handletask.o(i.cdma_sdk_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cdma_sdk_reply &rArr; mqtt_publish1 &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_str
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish1
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[18b]"></a>cdma_sdk_send</STRONG> (Thumb, 1476 bytes, Stack size 48 bytes, handletask.o(i.cdma_sdk_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cdma_sdk_send &rArr; made_keyX_valueF &rArr; float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_value4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[eb]"></a>cdma_tcp_init</STRONG> (Thumb, 1256 bytes, Stack size 56 bytes, handletask.o(i.cdma_tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cdma_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[12d]"></a>cdma_tcp_receive</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, handletask.o(i.cdma_tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cdma_tcp_receive &rArr; handlecmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[18e]"></a>cdma_tcp_reply</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, handletask.o(i.cdma_tcp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cdma_tcp_reply &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[18f]"></a>cdma_tcp_send</STRONG> (Thumb, 1506 bytes, Stack size 40 bytes, handletask.o(i.cdma_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cdma_tcp_send &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_fertisnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chge_coltsnd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_hand_auto
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[aa]"></a>chge_coltsnd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, handletask.o(i.chge_coltsnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = chge_coltsnd &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
</UL>

<P><STRONG><a name="[190]"></a>chge_fertisnd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, handletask.o(i.chge_fertisnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = chge_fertisnd &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
</UL>

<P><STRONG><a name="[102]"></a>cycle_cmd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, handletask.o(i.cycle_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cycle_cmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[98]"></a>dword_asc_hex</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, handletask.o(i.dword_asc_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dword_asc_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
</UL>

<P><STRONG><a name="[191]"></a>float_to_string</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, handletask.o(i.float_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;made_keyX_valueF
</UL>

<P><STRONG><a name="[131]"></a>gprs_cmd_receive</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, handletask.o(i.gprs_cmd_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gprs_cmd_receive &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[ed]"></a>gprs_other_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.gprs_other_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gprs_other_init &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[12b]"></a>gprs_other_receive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.gprs_other_receive))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxReport2
</UL>

<P><STRONG><a name="[19c]"></a>gprs_other_reply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handletask.o(i.gprs_other_reply))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wg_reply_cmd
</UL>

<P><STRONG><a name="[194]"></a>gprs_other_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handletask.o(i.gprs_other_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gprs_other_send &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_platform
</UL>

<P><STRONG><a name="[ec]"></a>gprs_tcp_init</STRONG> (Thumb, 1414 bytes, Stack size 64 bytes, handletask.o(i.gprs_tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gprs_tcp_init &rArr; mqtt_connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_connect_init
</UL>

<P><STRONG><a name="[a5]"></a>handlecmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, handletask.o(i.handlecmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = handlecmd &rArr; Start_timerEx &rArr; AddTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ctrl_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_receive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_receive
</UL>

<P><STRONG><a name="[182]"></a>is_number</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, handletask.o(i.is_number))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
</UL>

<P><STRONG><a name="[10d]"></a>jm_platform_reply</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, handletask.o(i.jm_platform_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = jm_platform_reply &rArr; mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_module
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_gprs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_cdma
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[9f]"></a>made_keyX_value</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, handletask.o(i.made_keyX_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = made_keyX_value
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
</UL>

<P><STRONG><a name="[a0]"></a>made_keyX_value4</STRONG> (Thumb, 214 bytes, Stack size 44 bytes, handletask.o(i.made_keyX_value4))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = made_keyX_value4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
</UL>

<P><STRONG><a name="[a1]"></a>made_keyX_valueF</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, handletask.o(i.made_keyX_valueF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = made_keyX_valueF &rArr; float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
</UL>

<P><STRONG><a name="[a2]"></a>made_keyX_valueF4</STRONG> (Thumb, 294 bytes, Stack size 104 bytes, handletask.o(i.made_keyX_valueF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = made_keyX_valueF4 &rArr; float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
</UL>

<P><STRONG><a name="[97]"></a>match_str</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, handletask.o(i.match_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = match_str
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_receive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_SMS_receive
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_receive
</UL>

<P><STRONG><a name="[9d]"></a>send_Ethernet_module</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, handletask.o(i.send_Ethernet_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_Ethernet_module &rArr; WriteDataToDMA_BufferTX1
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_reply
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_reply
</UL>

<P><STRONG><a name="[185]"></a>send_at_cdma</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, handletask.o(i.send_at_cdma))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_at_cdma &rArr; WriteDataToDMA_BufferTX2
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_reply
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
</UL>

<P><STRONG><a name="[186]"></a>send_at_gprs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, handletask.o(i.send_at_gprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_at_gprs &rArr; WriteDataToDMA_BufferTX2
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_reply
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
</UL>

<P><STRONG><a name="[187]"></a>send_data_module</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, handletask.o(i.send_data_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_data_module &rArr; WriteDataToDMA_BufferTX2
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jm_platform_reply
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_tcp_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_reply
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
</UL>

<P><STRONG><a name="[107]"></a>send_platform</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, handletask.o(i.send_platform))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = send_platform &rArr; cdma_sdk_send &rArr; made_keyX_valueF &rArr; float_to_string &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_send
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[195]"></a>set_ctrl_data</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, handletask.o(i.set_ctrl_data))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecmd
</UL>

<P><STRONG><a name="[106]"></a>set_slave_param</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, handletask.o(i.set_slave_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = set_slave_param &rArr; SI4463_Init &rArr; SI4463_CONFIG_INIT &rArr; SI4463_GPIO_CONFIG &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[114]"></a>set_slave_paramWX</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, handletask.o(i.set_slave_paramWX))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = set_slave_paramWX &rArr; SI4463_Init &rArr; SI4463_CONFIG_INIT &rArr; SI4463_GPIO_CONFIG &rArr; SI4463_READ_RESPONSE &rArr; SI4463_WAIT_CTS &rArr; SPI_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_timerEx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMultipleRegister
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_SEND_PACKET
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[fc]"></a>startadc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, handletask.o(i.startadc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startadc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[116]"></a>uart5_send_cmd</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, handletask.o(i.uart5_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart5_send_cmd &rArr; WriteDataToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToBuffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[f3]"></a>wg_init_readflash</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, handletask.o(i.wg_init_readflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wg_init_readflash
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[10c]"></a>wg_reply_cmd</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, handletask.o(i.wg_reply_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wg_reply_cmd &rArr; cdma_mqtt_reply &rArr; mqtt_publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_other_reply
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_tcp_reply
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_sdk_reply
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_other_reply
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_mqtt_reply
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_tcp_reply
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_sdk_reply
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_other_reply
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_mqtt_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>

<P><STRONG><a name="[115]"></a>wgcollector_data</STRONG> (Thumb, 3118 bytes, Stack size 48 bytes, handletask.o(i.wgcollector_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wgcollector_data &rArr; Get_Illuminance &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytelen_to_asc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToDMA_BufferTX1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_TempMeasurement
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI7021_HumiMeasurement
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRESSUE_level1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Illuminance
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carbon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_level0
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PRESSUE0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD_Getaverage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adclvbo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Getaverage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Events_Handle
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
